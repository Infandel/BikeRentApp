{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","bike-rent-app/tests/app.lint-test.js","bike-rent-app/tests/helpers/ember-power-select.js","bike-rent-app/tests/integration/components/bicycle-form-test.js","bike-rent-app/tests/integration/components/bicycle-item-test.js","bike-rent-app/tests/integration/components/history-item-test.js","bike-rent-app/tests/integration/components/trip-form-test.js","bike-rent-app/tests/integration/helpers/get-bicycle-by-id-test.js","bike-rent-app/tests/integration/helpers/get-bicycle-name-test.js","bike-rent-app/tests/integration/helpers/get-trip-name-test.js","bike-rent-app/tests/test-data/server.js","bike-rent-app/tests/test-helper.js","bike-rent-app/tests/tests.lint-test.js","bike-rent-app/tests/unit/adapters/application-test.js","bike-rent-app/tests/unit/controllers/bicycle-test.js","bike-rent-app/tests/unit/controllers/bicycle/create-test.js","bike-rent-app/tests/unit/controllers/bicycle/detail-test.js","bike-rent-app/tests/unit/controllers/bicycle/detail/new-trip-test.js","bike-rent-app/tests/unit/controllers/bicycle/edit-test.js","bike-rent-app/tests/unit/controllers/history-test.js","bike-rent-app/tests/unit/models/bicycle-test.js","bike-rent-app/tests/unit/models/trip-test.js","bike-rent-app/tests/unit/routes/404-test.js","bike-rent-app/tests/unit/routes/bicycle-test.js","bike-rent-app/tests/unit/routes/bicycle/create-test.js","bike-rent-app/tests/unit/routes/bicycle/detail-test.js","bike-rent-app/tests/unit/routes/bicycle/detail/new-trip-test.js","bike-rent-app/tests/unit/routes/bicycle/edit-test.js","bike-rent-app/tests/unit/routes/bicycle/index-test.js","bike-rent-app/tests/unit/routes/history-test.js","bike-rent-app/tests/unit/routes/index-test.js","bike-rent-app/tests/unit/serializers/application-test.js","bike-rent-app/tests/unit/serializers/bicycle-test.js","bike-rent-app/tests/unit/serializers/trip-test.js","bike-rent-app/tests/unit/services/data-test.js","bike-rent-app/tests/unit/transforms/date-string-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('bike-rent-app/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/application.js should pass ESLint\\n\\n13:50 - \\'query\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/bicycle-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/bicycle-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/bicycle-item.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/bicycle-item.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/history-item.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/history-item.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/trip-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/trip-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/bicycle.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/bicycle.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/bicycle/create.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/bicycle/create.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/bicycle/detail.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/bicycle/detail.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/bicycle/detail/new-trip.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/bicycle/detail/new-trip.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/bicycle/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/bicycle/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/history.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/history.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/get-bicycle-name.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/get-bicycle-name.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/get-trip-name.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/get-trip-name.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/bicycle.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/bicycle.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/trip.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/trip.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/404.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/404.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/bicycle.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/bicycle.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/bicycle/create.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/bicycle/create.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/bicycle/detail.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/bicycle/detail.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/bicycle/detail/new-trip.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/bicycle/detail/new-trip.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/bicycle/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/bicycle/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/bicycle/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/bicycle/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/history.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/history.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'serializers/application.js should pass ESLint\\n\\n5:20 - \\'hash\\' is defined but never used. (no-unused-vars)\\n9:38 - \\'method\\' is defined but never used. (no-unused-vars)\\n16:46 - \\'relationshipHash\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('serializers/bicycle.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/bicycle.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('serializers/trip.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/trip.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/data.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/data.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transforms/date-string.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transforms/date-string.js should pass ESLint\\n\\n');\n  });\n});","define('bike-rent-app/tests/helpers/ember-power-select', ['exports', 'ember-power-select/test-support/helpers'], function (exports, _helpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.selectChoose = exports.touchTrigger = exports.nativeTouch = exports.clickTrigger = exports.typeInSearch = exports.triggerKeydown = exports.nativeMouseUp = exports.nativeMouseDown = exports.findContains = undefined;\n  exports.default = deprecatedRegisterHelpers;\n\n\n  function deprecateHelper(fn, name) {\n    return function (...args) {\n      (true && !(false) && Ember.deprecate(`DEPRECATED \\`import { ${name} } from '../../tests/helpers/ember-power-select';\\` is deprecated. Please, replace it with \\`import { ${name} } from 'ember-power-select/test-support/helpers';\\``, false, { until: '1.11.0', id: `ember-power-select-test-support-${name}` }));\n\n      return fn(...args);\n    };\n  }\n\n  let findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  let nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  let nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  let triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  let typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  let clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  let nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  let touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  let selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, { until: '1.11.0', id: 'ember-power-select-test-support-register-helpers' }));\n\n    return (0, _helpers.default)();\n  }\n\n  exports.findContains = findContains;\n  exports.nativeMouseDown = nativeMouseDown;\n  exports.nativeMouseUp = nativeMouseUp;\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n  exports.nativeTouch = nativeTouch;\n  exports.touchTrigger = touchTrigger;\n  exports.selectChoose = selectChoose;\n});","define('bike-rent-app/tests/integration/components/bicycle-form-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | bicycle-form', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"MkRs0Sn0\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"bicycle-form\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"4/a2x7dd\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"bicycle-form\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('bike-rent-app/tests/integration/components/bicycle-item-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | bicycle-item', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"c0YMDkLa\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"bicycle-item\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"2++4aN5d\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"bicycle-item\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('bike-rent-app/tests/integration/components/history-item-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | history-item', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"GG1PBOIM\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"history-item\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"ns4NnAv3\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"history-item\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('bike-rent-app/tests/integration/components/trip-form-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | trip-form', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('it renders', async function (assert) {\n      // Set any properties with this.set('myProperty', 'value');\n      // Handle any actions with this.set('myAction', function(val) { ... });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"UbL1MPln\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[20,\\\"trip-form\\\"],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '');\n\n      // Template block usage:\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"salbW0Ks\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"trip-form\\\",null,null,{\\\"statements\\\":[[0,\\\"        template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"    \\\"]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), 'template block text');\n    });\n  });\n});","define('bike-rent-app/tests/integration/helpers/get-bicycle-by-id-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Helper | get-bicycle-by-id', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('inputValue', '1234');\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"mMjUO23Y\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"get-bicycle-by-id\\\",[[22,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '1234');\n    });\n  });\n});","define('bike-rent-app/tests/integration/helpers/get-bicycle-name-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Helper | get-bicycle-name', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('inputValue', '1234');\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"+S4uShE6\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"get-bicycle-name\\\",[[22,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '1234');\n    });\n  });\n});","define('bike-rent-app/tests/integration/helpers/get-trip-name-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Helper | get-trip-name', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('inputValue', '1234');\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"QudJ5aFa\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[26,\\\"get-trip-name\\\",[[22,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '1234');\n    });\n  });\n});","define('bike-rent-app/tests/test-data/server', ['json-server'], function (jsonServer) {\n  'use strict';\n\n  const server = jsonServer.create(); /* eslint-disable no-console */\n  // eslint-disable-next-line no-undef\n\n  const router = jsonServer.router('./tests/test-data/db.json');\n  const middlewares = jsonServer.defaults();\n\n  // Set default middlewares (logger, static, cors and no-cache)\n  server.use(middlewares);\n\n  // To handle POST, PUT and PATCH you need to use a body-parser\n  // You can use the one used by JSON Server\n  server.use(jsonServer.bodyParser);\n\n  function responseInterceptor(req, res, next) {\n    var originalSend = res.send;\n\n    res.send = function () {\n      let body = arguments[0];\n\n      if (req.method === 'DELETE') {\n        let urlSegms = req.url.split('/');\n        let idStr = urlSegms[urlSegms.length - 1];\n        let id = parseInt(idStr);\n        id = isNaN(id) ? idStr : id;\n\n        let newBody = Object.assign({}, JSON.parse(body));\n        newBody.id = id;\n        arguments[0] = JSON.stringify(newBody);\n      }\n\n      originalSend.apply(res, arguments);\n    };\n\n    next();\n  }\n\n  server.use(responseInterceptor);\n\n  // Use default router\n  server.use(router);\n\n  let port = 3000;\n  server.listen(port, () => {\n    console.log(`JSON Server is running at port ${port}`);\n  });\n});","define('bike-rent-app/tests/test-helper', ['bike-rent-app/app', 'bike-rent-app/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('bike-rent-app/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('integration/components/bicycle-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/bicycle-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/bicycle-item-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/bicycle-item-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/history-item-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/history-item-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/trip-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/trip-form-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/get-bicycle-by-id-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/get-bicycle-by-id-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/get-bicycle-name-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/get-bicycle-name-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/get-trip-name-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/get-trip-name-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-data/server.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-data/server.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/bicycle-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/bicycle-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/bicycle/create-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/bicycle/create-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/bicycle/detail-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/bicycle/detail-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/bicycle/detail/new-trip-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/bicycle/detail/new-trip-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/bicycle/edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/bicycle/edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/history-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/history-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/bicycle-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/bicycle-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/trip-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/trip-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/404-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/404-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/bicycle-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/bicycle-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/bicycle/create-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/bicycle/create-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/bicycle/detail-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/bicycle/detail-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/bicycle/detail/new-trip-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/bicycle/detail/new-trip-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/bicycle/edit-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/bicycle/edit-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/bicycle/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/bicycle/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/history-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/history-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/bicycle-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/bicycle-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/trip-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/trip-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/data-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/data-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/transforms/date-string-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/transforms/date-string-test.js should pass ESLint\\n\\n');\n  });\n});","define('bike-rent-app/tests/unit/adapters/application-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Adapter | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let adapter = this.owner.lookup('adapter:application');\n      assert.ok(adapter);\n    });\n  });\n});","define('bike-rent-app/tests/unit/controllers/bicycle-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | bicycle', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:bicycle');\n      assert.ok(controller);\n    });\n  });\n});","define('bike-rent-app/tests/unit/controllers/bicycle/create-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | bicycle/create', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:bicycle/create');\n      assert.ok(controller);\n    });\n  });\n});","define('bike-rent-app/tests/unit/controllers/bicycle/detail-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | bicycle/detail', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:bicycle/detail');\n      assert.ok(controller);\n    });\n  });\n});","define('bike-rent-app/tests/unit/controllers/bicycle/detail/new-trip-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | bicycle/detail/new-trip', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:bicycle/detail/new-trip');\n      assert.ok(controller);\n    });\n  });\n});","define('bike-rent-app/tests/unit/controllers/bicycle/edit-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | bicycle/edit', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:bicycle/edit');\n      assert.ok(controller);\n    });\n  });\n});","define('bike-rent-app/tests/unit/controllers/history-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | history', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:history');\n      assert.ok(controller);\n    });\n  });\n});","define('bike-rent-app/tests/unit/models/bicycle-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | bicycle', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = Ember.run(() => store.createRecord('bicycle', {}));\n      assert.ok(model);\n    });\n  });\n});","define('bike-rent-app/tests/unit/models/trip-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | trip', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let model = Ember.run(() => store.createRecord('trip', {}));\n      assert.ok(model);\n    });\n  });\n});","define('bike-rent-app/tests/unit/routes/404-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | 404', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:404');\n      assert.ok(route);\n    });\n  });\n});","define('bike-rent-app/tests/unit/routes/bicycle-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | bicycle', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:bicycle');\n      assert.ok(route);\n    });\n  });\n});","define('bike-rent-app/tests/unit/routes/bicycle/create-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | bicycle/create', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:bicycle/create');\n      assert.ok(route);\n    });\n  });\n});","define('bike-rent-app/tests/unit/routes/bicycle/detail-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | bicycle/detail', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:bicycle/detail');\n      assert.ok(route);\n    });\n  });\n});","define('bike-rent-app/tests/unit/routes/bicycle/detail/new-trip-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | bicycle/detail/new-trip', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:bicycle/detail/new-trip');\n      assert.ok(route);\n    });\n  });\n});","define('bike-rent-app/tests/unit/routes/bicycle/edit-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | bicycle/edit', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:bicycle/edit');\n      assert.ok(route);\n    });\n  });\n});","define('bike-rent-app/tests/unit/routes/bicycle/index-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | bicycle/index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:bicycle/index');\n      assert.ok(route);\n    });\n  });\n});","define('bike-rent-app/tests/unit/routes/history-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | history', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:history');\n      assert.ok(route);\n    });\n  });\n});","define('bike-rent-app/tests/unit/routes/index-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | index', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:index');\n      assert.ok(route);\n    });\n  });\n});","define('bike-rent-app/tests/unit/serializers/application-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Serializer | application', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let serializer = store.serializerFor('application');\n\n      assert.ok(serializer);\n    });\n\n    (0, _qunit.test)('it serializes records', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let record = Ember.run(() => store.createRecord('application', {}));\n\n      let serializedRecord = record.serialize();\n\n      assert.ok(serializedRecord);\n    });\n  });\n});","define('bike-rent-app/tests/unit/serializers/bicycle-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Serializer | bicycle', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let serializer = store.serializerFor('bicycle');\n\n      assert.ok(serializer);\n    });\n\n    (0, _qunit.test)('it serializes records', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let record = Ember.run(() => store.createRecord('bicycle', {}));\n\n      let serializedRecord = record.serialize();\n\n      assert.ok(serializedRecord);\n    });\n  });\n});","define('bike-rent-app/tests/unit/serializers/trip-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Serializer | trip', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let serializer = store.serializerFor('trip');\n\n      assert.ok(serializer);\n    });\n\n    (0, _qunit.test)('it serializes records', function (assert) {\n      let store = this.owner.lookup('service:store');\n      let record = Ember.run(() => store.createRecord('trip', {}));\n\n      let serializedRecord = record.serialize();\n\n      assert.ok(serializedRecord);\n    });\n  });\n});","define('bike-rent-app/tests/unit/services/data-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Service | data', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let service = this.owner.lookup('service:data');\n      assert.ok(service);\n    });\n  });\n});","define('bike-rent-app/tests/unit/transforms/date-string-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('transform:date-string', 'Unit | Transform | date string', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let transform = this.owner.lookup('transform:date-string');\n      assert.ok(transform);\n    });\n  });\n});","define('bike-rent-app/config/environment', [], function() {\n  var prefix = 'bike-rent-app';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('bike-rent-app/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsxKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClntBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}